version: '3'

services:
  ###############################################################
  #                Our core monitoring stack                    #
  ###############################################################
  prometheus:
    image: prom/prometheus:main
    container_name: prom
    restart: unless-stopped
    labels:
      - "traefik.http.routers.prom.rule=Host(`${PROM_VIRTUAL_HOST}`)"
      - "traefik.http.routers.prom.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prom.middlewares=auth"
      - "traefik.docker.network=ingress"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # We mount a custom prometheus config
      - prom-db:/prometheus
    networks:
      - ingress
      - default

  grafana:                                            # Garafana needs no config file since
    image: grafana/grafana                            # we configure it once it's up
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SERVER_DOMAIN: "${GRAFANA_VIRTUAL_HOST}"
      GF_SERVER_HTTP_PORT: 80
      GF_SERVER_PROTOCOL: http
    expose:
      - 80
    labels:
      - "traefik.http.routers.monitor.rule=Host(`${GRAFANA_VIRTUAL_HOST}`)"
      - "traefik.http.routers.monitor.tls.certresolver=letsencrypt"
      - "traefik.docker.network=ingress"
    depends_on: [prometheus]
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - default
      - ingress

  ###############################################################
  #            Agents to collect runtime metric                 #
  ###############################################################

  loki:
    container_name: loki
    restart: unless-stopped
    image: grafana/loki:2.6.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - loki:/loki
    networks:
      - default

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    hostname: "${HOSTNAME}"
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - /:/host:ro

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    volumes:                                          # Don't ask me why I mounted all these
    - /:/rootfs:ro                                    # directories. I simply copied these
    - /var/run:/var/run:ro                            # mounts from the documentation.
    - /sys:/sys:ro
    - /dev:/dev:ro
    - /var/lib/docker/:/var/lib/docker:ro

volumes:
  grafana:
  am-data:
  prom-db:
  loki:

networks:
  default:
  ingress:
    external: true
