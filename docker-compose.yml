services:
  database:
    image: postgres
    healthcheck:
      test: pg_isready
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD:?please set database password}"
      POSTGRES_DB: 'kazantracks'
      POSTGRES_USER: 'django'
    volumes:
      - db-data:/var/lib/postgresql/data

  web:
    build:
      context: .
      args:
        - PORT=8000
    environment:
      DJANGO_DEBUG: "${DJANGO_DEBUG:-False}"
      DB_HOST: database
      DB_PASSWORD:
      LOG_LEVEL: debug
    expose:
      - 8000
    labels:
      - "traefik.http.routers.kt-web-${DEPLOY_ENV}.rule=Host(`${VIRTUAL_HOST}`)"
      - "traefik.http.routers.kt-web-${DEPLOY_ENV}.tls.certresolver=letsencrypt"
      - "traefik.http.services.kt-web-${DEPLOY_ENV}.loadbalancer.healthcheck.hostname=web"
      - "traefik.http.services.kt-web-${DEPLOY_ENV}.loadbalancer.healthcheck.path=/healthz"
      - "traefik.docker.network=ingress"
    volumes:
      - uploads:/usr/src/images/uploads/
    depends_on:
      - database
    networks:
      - ingress
      - default

  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    labels:
      - "traefik.http.routers.kt-static-${DEPLOY_ENV}.rule=(Host(`${VIRTUAL_HOST}`) && PathPrefix(`/static/`, `/images/`, `/favicon.ico`))"
      - "traefik.http.routers.kt-static-${DEPLOY_ENV}.tls.certresolver=letsencrypt"
      - "traefik.docker.network=ingress"
    volumes:
      - uploads:/images/uploads
    depends_on:
      - web
    networks:
      - ingress

volumes:
  uploads:
    name: "${DEPLOY_ENV:-dev}-uploads"
  db-data:
    name: "${DEPLOY_ENV:-dev}-routsweb-db"

networks:
  default:
  ingress:
    external: true
